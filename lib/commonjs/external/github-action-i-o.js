import { getInput, setFailed, setOutput } from "@actions/core";
import { parseJSON } from "../lib/util.js";
import { Ok } from "../lib/core/result.js";
import { None, Some } from "../lib/core/option.js";
class GithubActionIO {
    get(key) {
        return getInput(key);
    }
    getObject(key, validator) {
        const raw = this.get(key);
        return parseJSON(raw).andThen((j) => validator.asResult({
            none: () => Ok(j),
            some: (v) => v.parse(j),
        }));
    }
    set(key, value) {
        setOutput(key, value);
    }
    setObject(key, value) {
        setOutput(key, JSON.stringify(value));
    }
    getOptionalObject(key, validator) {
        const raw = this.get(key);
        if (raw === "")
            return Ok(None());
        return this.getObject(key, validator).map((o) => Some(o));
    }
    /* istanbul ignore next */
    setFail(message) {
        setFailed(message);
    }
}
export { GithubActionIO };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aHViLWFjdGlvbi1pLW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZXh0ZXJuYWwvZ2l0aHViLWFjdGlvbi1pLW8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQUUsRUFBRSxFQUFVLE1BQU0sdUJBQXVCLENBQUM7QUFDbkQsT0FBTyxFQUFFLElBQUksRUFBVSxJQUFJLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUzRCxNQUFNLGNBQWM7SUFDbEIsR0FBRyxDQUFDLEdBQVc7UUFDYixPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsU0FBUyxDQUFJLEdBQVcsRUFBRSxTQUErQjtRQUN2RCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQ2xDLFNBQVMsQ0FBQyxRQUFRLENBQUM7WUFDakIsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQXFCO1lBQ3JDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDeEIsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVcsRUFBRSxLQUFhO1FBQzVCLFNBQVMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELFNBQVMsQ0FBQyxHQUFXLEVBQUUsS0FBYTtRQUNsQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsaUJBQWlCLENBQ2YsR0FBVyxFQUNYLFNBQStCO1FBRS9CLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsSUFBSSxHQUFHLEtBQUssRUFBRTtZQUFFLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFFbEMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCwwQkFBMEI7SUFDMUIsT0FBTyxDQUFDLE9BQXVCO1FBQzdCLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQixDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb25JTyB9IGZyb20gXCIuLi9saWIvaW50ZXJmYWNlL2lvLmpzXCI7XG5pbXBvcnQgeyBnZXRJbnB1dCwgc2V0RmFpbGVkLCBzZXRPdXRwdXQgfSBmcm9tIFwiQGFjdGlvbnMvY29yZVwiO1xuaW1wb3J0IHsgcGFyc2VKU09OIH0gZnJvbSBcIi4uL2xpYi91dGlsLmpzXCI7XG5pbXBvcnQgeyBWYWxpZGF0b3IgfSBmcm9tIFwiLi4vbGliL2ludGVyZmFjZS92YWxpZGF0b3IuanNcIjtcbmltcG9ydCB7IE9rLCBSZXN1bHQgfSBmcm9tIFwiLi4vbGliL2NvcmUvcmVzdWx0LmpzXCI7XG5pbXBvcnQgeyBOb25lLCBPcHRpb24sIFNvbWUgfSBmcm9tIFwiLi4vbGliL2NvcmUvb3B0aW9uLmpzXCI7XG5cbmNsYXNzIEdpdGh1YkFjdGlvbklPIGltcGxlbWVudHMgQWN0aW9uSU8ge1xuICBnZXQoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBnZXRJbnB1dChrZXkpO1xuICB9XG5cbiAgZ2V0T2JqZWN0PFQ+KGtleTogc3RyaW5nLCB2YWxpZGF0b3I6IE9wdGlvbjxWYWxpZGF0b3I8VD4+KTogUmVzdWx0PFQsIEVycm9yPiB7XG4gICAgY29uc3QgcmF3ID0gdGhpcy5nZXQoa2V5KTtcbiAgICByZXR1cm4gcGFyc2VKU09OKHJhdykuYW5kVGhlbigoaikgPT5cbiAgICAgIHZhbGlkYXRvci5hc1Jlc3VsdCh7XG4gICAgICAgIG5vbmU6ICgpID0+IE9rKGopIGFzIFJlc3VsdDxULCBFcnJvcj4sXG4gICAgICAgIHNvbWU6ICh2KSA9PiB2LnBhcnNlKGopLFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgc2V0T3V0cHV0KGtleSwgdmFsdWUpO1xuICB9XG5cbiAgc2V0T2JqZWN0KGtleTogc3RyaW5nLCB2YWx1ZTogb2JqZWN0KTogdm9pZCB7XG4gICAgc2V0T3V0cHV0KGtleSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgfVxuXG4gIGdldE9wdGlvbmFsT2JqZWN0PFQ+KFxuICAgIGtleTogc3RyaW5nLFxuICAgIHZhbGlkYXRvcjogT3B0aW9uPFZhbGlkYXRvcjxUPj5cbiAgKTogUmVzdWx0PE9wdGlvbjxUPiwgRXJyb3I+IHtcbiAgICBjb25zdCByYXcgPSB0aGlzLmdldChrZXkpO1xuICAgIGlmIChyYXcgPT09IFwiXCIpIHJldHVybiBPayhOb25lKCkpO1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KGtleSwgdmFsaWRhdG9yKS5tYXAoKG8pID0+IFNvbWUobykpO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgc2V0RmFpbChtZXNzYWdlOiBzdHJpbmcgfCBFcnJvcik6IHZvaWQge1xuICAgIHNldEZhaWxlZChtZXNzYWdlKTtcbiAgfVxufVxuXG5leHBvcnQgeyBHaXRodWJBY3Rpb25JTyB9O1xuIl19