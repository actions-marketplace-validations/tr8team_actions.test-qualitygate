import { GithubActionIO } from "./external/github-action-i-o";
import { GithubActionLogger } from "./external/github-action-logger";
import { IoInputRetriever } from "./lib/adapters/io-input-retriever";
import { ZodValidatorAdapter } from "./lib/adapters/zod-validator-adapter";
import { historyEntry, history } from "./lib/history";
import { policyConfigs } from "./lib/policy-config";
import { BasicElementMapper } from "./lib/basic-element-mapper";
import { BasicPolicyEngine } from "./lib/basic-policy-engine";
import { BasicPolicyFactory } from "./lib/basic-policy-factory";
import { BasicQualityGateService } from "./lib/service";
import { App } from "./lib/main";
import os from "os";
import { toOption } from "./lib/util";
const io = new GithubActionIO();
const logger = new GithubActionLogger();
const historyEntryValidator = new ZodValidatorAdapter(historyEntry);
const historyValidator = new ZodValidatorAdapter(history);
const policyConfigValidator = new ZodValidatorAdapter(policyConfigs);
const input = new IoInputRetriever(io, historyEntryValidator, historyValidator, policyConfigValidator);
const mapper = new BasicElementMapper();
const policyEngine = new BasicPolicyEngine(mapper);
const policyFactory = new BasicPolicyFactory();
const service = new BasicQualityGateService(policyFactory, policyEngine, io, logger);
const app = new App(input, service, io);
await app.run().match({
    none: () => {
        logger.info("✅ Successfully tracked commit artifact metadata");
    },
    some: async (err) => {
        logger.error("❌ Failed to execute quality gate");
        io.setFail(err);
        const messages = await toOption(err?.stack).match({
            none: ["❌ No stacktrace found!"],
            some: (stacktrace) => stacktrace.split(os.EOL),
        });
        for (const m of messages) {
            logger.error(m);
        }
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUUzRSxPQUFPLEVBQUUsWUFBWSxFQUF5QixPQUFPLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFFLGFBQWEsRUFBaUIsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNqQyxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUV0QyxNQUFNLEVBQUUsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO0FBQ2hDLE1BQU0sTUFBTSxHQUFHLElBQUksa0JBQWtCLEVBQUUsQ0FBQztBQUN4QyxNQUFNLHFCQUFxQixHQUE0QixJQUFJLG1CQUFtQixDQUM1RSxZQUFZLENBQ2IsQ0FBQztBQUNGLE1BQU0sZ0JBQWdCLEdBQXVCLElBQUksbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDOUUsTUFBTSxxQkFBcUIsR0FBNkIsSUFBSSxtQkFBbUIsQ0FDN0UsYUFBYSxDQUNkLENBQUM7QUFDRixNQUFNLEtBQUssR0FBRyxJQUFJLGdCQUFnQixDQUNoQyxFQUFFLEVBQ0YscUJBQXFCLEVBQ3JCLGdCQUFnQixFQUNoQixxQkFBcUIsQ0FDdEIsQ0FBQztBQUNGLE1BQU0sTUFBTSxHQUFHLElBQUksa0JBQWtCLEVBQUUsQ0FBQztBQUN4QyxNQUFNLFlBQVksR0FBRyxJQUFJLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25ELE1BQU0sYUFBYSxHQUFHLElBQUksa0JBQWtCLEVBQUUsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRyxJQUFJLHVCQUF1QixDQUN6QyxhQUFhLEVBQ2IsWUFBWSxFQUNaLEVBQUUsRUFDRixNQUFNLENBQ1AsQ0FBQztBQUVGLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFFeEMsTUFBTSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO0lBQ3BCLElBQUksRUFBRSxHQUFHLEVBQUU7UUFDVCxNQUFNLENBQUMsSUFBSSxDQUFDLGlEQUFpRCxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUNELElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDbEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBQ2pELEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEIsTUFBTSxRQUFRLEdBQUcsTUFBTSxRQUFRLENBQVMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUN4RCxJQUFJLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztZQUNoQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztTQUMvQyxDQUFDLENBQUM7UUFDSCxLQUFLLE1BQU0sQ0FBQyxJQUFJLFFBQVEsRUFBRTtZQUN4QixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQztDQUNGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdpdGh1YkFjdGlvbklPIH0gZnJvbSBcIi4vZXh0ZXJuYWwvZ2l0aHViLWFjdGlvbi1pLW9cIjtcbmltcG9ydCB7IEdpdGh1YkFjdGlvbkxvZ2dlciB9IGZyb20gXCIuL2V4dGVybmFsL2dpdGh1Yi1hY3Rpb24tbG9nZ2VyXCI7XG5pbXBvcnQgeyBJb0lucHV0UmV0cmlldmVyIH0gZnJvbSBcIi4vbGliL2FkYXB0ZXJzL2lvLWlucHV0LXJldHJpZXZlclwiO1xuaW1wb3J0IHsgWm9kVmFsaWRhdG9yQWRhcHRlciB9IGZyb20gXCIuL2xpYi9hZGFwdGVycy96b2QtdmFsaWRhdG9yLWFkYXB0ZXJcIjtcbmltcG9ydCB7IFZhbGlkYXRvciB9IGZyb20gXCIuL2xpYi9pbnRlcmZhY2UvdmFsaWRhdG9yXCI7XG5pbXBvcnQgeyBoaXN0b3J5RW50cnksIEhpc3RvcnlFbnRyeSwgSGlzdG9yeSwgaGlzdG9yeSB9IGZyb20gXCIuL2xpYi9oaXN0b3J5XCI7XG5pbXBvcnQgeyBwb2xpY3lDb25maWdzLCBQb2xpY3lDb25maWdzIH0gZnJvbSBcIi4vbGliL3BvbGljeS1jb25maWdcIjtcbmltcG9ydCB7IEJhc2ljRWxlbWVudE1hcHBlciB9IGZyb20gXCIuL2xpYi9iYXNpYy1lbGVtZW50LW1hcHBlclwiO1xuaW1wb3J0IHsgQmFzaWNQb2xpY3lFbmdpbmUgfSBmcm9tIFwiLi9saWIvYmFzaWMtcG9saWN5LWVuZ2luZVwiO1xuaW1wb3J0IHsgQmFzaWNQb2xpY3lGYWN0b3J5IH0gZnJvbSBcIi4vbGliL2Jhc2ljLXBvbGljeS1mYWN0b3J5XCI7XG5pbXBvcnQgeyBCYXNpY1F1YWxpdHlHYXRlU2VydmljZSB9IGZyb20gXCIuL2xpYi9zZXJ2aWNlXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9saWIvbWFpblwiO1xuaW1wb3J0IG9zIGZyb20gXCJvc1wiO1xuaW1wb3J0IHsgdG9PcHRpb24gfSBmcm9tIFwiLi9saWIvdXRpbFwiO1xuXG5jb25zdCBpbyA9IG5ldyBHaXRodWJBY3Rpb25JTygpO1xuY29uc3QgbG9nZ2VyID0gbmV3IEdpdGh1YkFjdGlvbkxvZ2dlcigpO1xuY29uc3QgaGlzdG9yeUVudHJ5VmFsaWRhdG9yOiBWYWxpZGF0b3I8SGlzdG9yeUVudHJ5PiA9IG5ldyBab2RWYWxpZGF0b3JBZGFwdGVyKFxuICBoaXN0b3J5RW50cnlcbik7XG5jb25zdCBoaXN0b3J5VmFsaWRhdG9yOiBWYWxpZGF0b3I8SGlzdG9yeT4gPSBuZXcgWm9kVmFsaWRhdG9yQWRhcHRlcihoaXN0b3J5KTtcbmNvbnN0IHBvbGljeUNvbmZpZ1ZhbGlkYXRvcjogVmFsaWRhdG9yPFBvbGljeUNvbmZpZ3M+ID0gbmV3IFpvZFZhbGlkYXRvckFkYXB0ZXIoXG4gIHBvbGljeUNvbmZpZ3Ncbik7XG5jb25zdCBpbnB1dCA9IG5ldyBJb0lucHV0UmV0cmlldmVyKFxuICBpbyxcbiAgaGlzdG9yeUVudHJ5VmFsaWRhdG9yLFxuICBoaXN0b3J5VmFsaWRhdG9yLFxuICBwb2xpY3lDb25maWdWYWxpZGF0b3Jcbik7XG5jb25zdCBtYXBwZXIgPSBuZXcgQmFzaWNFbGVtZW50TWFwcGVyKCk7XG5jb25zdCBwb2xpY3lFbmdpbmUgPSBuZXcgQmFzaWNQb2xpY3lFbmdpbmUobWFwcGVyKTtcbmNvbnN0IHBvbGljeUZhY3RvcnkgPSBuZXcgQmFzaWNQb2xpY3lGYWN0b3J5KCk7XG5cbmNvbnN0IHNlcnZpY2UgPSBuZXcgQmFzaWNRdWFsaXR5R2F0ZVNlcnZpY2UoXG4gIHBvbGljeUZhY3RvcnksXG4gIHBvbGljeUVuZ2luZSxcbiAgaW8sXG4gIGxvZ2dlclxuKTtcblxuY29uc3QgYXBwID0gbmV3IEFwcChpbnB1dCwgc2VydmljZSwgaW8pO1xuXG5hd2FpdCBhcHAucnVuKCkubWF0Y2goe1xuICBub25lOiAoKSA9PiB7XG4gICAgbG9nZ2VyLmluZm8oXCLinIUgU3VjY2Vzc2Z1bGx5IHRyYWNrZWQgY29tbWl0IGFydGlmYWN0IG1ldGFkYXRhXCIpO1xuICB9LFxuICBzb21lOiBhc3luYyAoZXJyKSA9PiB7XG4gICAgbG9nZ2VyLmVycm9yKFwi4p2MIEZhaWxlZCB0byBleGVjdXRlIHF1YWxpdHkgZ2F0ZVwiKTtcbiAgICBpby5zZXRGYWlsKGVycik7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBhd2FpdCB0b09wdGlvbjxzdHJpbmc+KGVycj8uc3RhY2spLm1hdGNoKHtcbiAgICAgIG5vbmU6IFtcIuKdjCBObyBzdGFja3RyYWNlIGZvdW5kIVwiXSxcbiAgICAgIHNvbWU6IChzdGFja3RyYWNlKSA9PiBzdGFja3RyYWNlLnNwbGl0KG9zLkVPTCksXG4gICAgfSk7XG4gICAgZm9yIChjb25zdCBtIG9mIG1lc3NhZ2VzKSB7XG4gICAgICBsb2dnZXIuZXJyb3IobSk7XG4gICAgfVxuICB9LFxufSk7XG4iXX0=