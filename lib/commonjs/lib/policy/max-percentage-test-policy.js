import { literal, number, object } from "zod";
import { testMetric } from "../enums";
import { BasePolicy } from "./base-policy";
const maxPercentageTestPolicy = object({
    type: literal("max-percentage-test-policy"),
    metric: testMetric,
    warn: number().min(0).max(100),
    fail: number().min(0).max(100),
})
    .required()
    .strict();
class MaxPercentageTestPolicy extends BasePolicy {
    #config;
    constructor(name, target, config) {
        super(name, target);
        this.#config = config;
    }
    evaluate(current) {
        return this.filteredEvaluate(current, (item) => {
            if (item.data.type === "test-result") {
                const { data } = item;
                const warn = this.#config.warn;
                const fail = this.#config.fail;
                const total = data.fail + data.skip + data.pass;
                const percentage = total === 0 ? 0 : (data[this.#config.metric] / total) * 100;
                let verdict = "pass";
                if (percentage > warn) {
                    verdict = "warn";
                }
                if (percentage > fail) {
                    verdict = "fail";
                }
                return Promise.resolve(this.updateElement(item, verdict));
            }
            return Promise.resolve(item);
        });
    }
}
export { maxPercentageTestPolicy, MaxPercentageTestPolicy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4LXBlcmNlbnRhZ2UtdGVzdC1wb2xpY3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3BvbGljeS9tYXgtcGVyY2VudGFnZS10ZXN0LXBvbGljeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUssTUFBTSxLQUFLLENBQUM7QUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE1BQU0sdUJBQXVCLEdBQUcsTUFBTSxDQUFDO0lBQ3JDLElBQUksRUFBRSxPQUFPLENBQUMsNEJBQTRCLENBQUM7SUFDM0MsTUFBTSxFQUFFLFVBQVU7SUFDbEIsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQzlCLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztDQUMvQixDQUFDO0tBQ0MsUUFBUSxFQUFFO0tBQ1YsTUFBTSxFQUFFLENBQUM7QUFJWixNQUFNLHVCQUF3QixTQUFRLFVBQVU7SUFDckMsT0FBTyxDQUFnQztJQUVoRCxZQUNFLElBQVksRUFDWixNQUFjLEVBQ2QsTUFBcUM7UUFFckMsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN4QixDQUFDO0lBRUQsUUFBUSxDQUFDLE9BQTBCO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQzdDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssYUFBYSxFQUFFO2dCQUNwQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUN0QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDL0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBRS9CLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUNoRCxNQUFNLFVBQVUsR0FDZCxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUM5RCxJQUFJLE9BQU8sR0FBaUIsTUFBTSxDQUFDO2dCQUNuQyxJQUFJLFVBQVUsR0FBRyxJQUFJLEVBQUU7b0JBQ3JCLE9BQU8sR0FBRyxNQUFNLENBQUM7aUJBQ2xCO2dCQUNELElBQUksVUFBVSxHQUFHLElBQUksRUFBRTtvQkFDckIsT0FBTyxHQUFHLE1BQU0sQ0FBQztpQkFDbEI7Z0JBQ0QsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFDM0Q7WUFDRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxpdGVyYWwsIG51bWJlciwgb2JqZWN0LCB6IH0gZnJvbSBcInpvZFwiO1xuaW1wb3J0IHsgdGVzdE1ldHJpYyB9IGZyb20gXCIuLi9lbnVtc1wiO1xuaW1wb3J0IHsgUG9saWN5IH0gZnJvbSBcIi4uL2ludGVyZmFjZS9wb2xpY3lcIjtcbmltcG9ydCB7IEJhc2VQb2xpY3kgfSBmcm9tIFwiLi9iYXNlLXBvbGljeVwiO1xuaW1wb3J0IHsgSW50ZXJtZWRpYXRlRW50cnksIFBvbGljeVJlc3VsdCB9IGZyb20gXCIuLi9vdXRwdXRcIjtcblxuY29uc3QgbWF4UGVyY2VudGFnZVRlc3RQb2xpY3kgPSBvYmplY3Qoe1xuICB0eXBlOiBsaXRlcmFsKFwibWF4LXBlcmNlbnRhZ2UtdGVzdC1wb2xpY3lcIiksXG4gIG1ldHJpYzogdGVzdE1ldHJpYyxcbiAgd2FybjogbnVtYmVyKCkubWluKDApLm1heCgxMDApLFxuICBmYWlsOiBudW1iZXIoKS5taW4oMCkubWF4KDEwMCksXG59KVxuICAucmVxdWlyZWQoKVxuICAuc3RyaWN0KCk7XG5cbnR5cGUgTWF4UGVyY2VudGFnZVRlc3RQb2xpY3lDb25maWcgPSB6LmluZmVyPHR5cGVvZiBtYXhQZXJjZW50YWdlVGVzdFBvbGljeT47XG5cbmNsYXNzIE1heFBlcmNlbnRhZ2VUZXN0UG9saWN5IGV4dGVuZHMgQmFzZVBvbGljeSBpbXBsZW1lbnRzIFBvbGljeSB7XG4gIHJlYWRvbmx5ICNjb25maWc6IE1heFBlcmNlbnRhZ2VUZXN0UG9saWN5Q29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICB0YXJnZXQ6IHN0cmluZyxcbiAgICBjb25maWc6IE1heFBlcmNlbnRhZ2VUZXN0UG9saWN5Q29uZmlnXG4gICkge1xuICAgIHN1cGVyKG5hbWUsIHRhcmdldCk7XG4gICAgdGhpcy4jY29uZmlnID0gY29uZmlnO1xuICB9XG5cbiAgZXZhbHVhdGUoY3VycmVudDogSW50ZXJtZWRpYXRlRW50cnkpOiBQcm9taXNlPEludGVybWVkaWF0ZUVudHJ5PiB7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyZWRFdmFsdWF0ZShjdXJyZW50LCAoaXRlbSkgPT4ge1xuICAgICAgaWYgKGl0ZW0uZGF0YS50eXBlID09PSBcInRlc3QtcmVzdWx0XCIpIHtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBpdGVtO1xuICAgICAgICBjb25zdCB3YXJuID0gdGhpcy4jY29uZmlnLndhcm47XG4gICAgICAgIGNvbnN0IGZhaWwgPSB0aGlzLiNjb25maWcuZmFpbDtcblxuICAgICAgICBjb25zdCB0b3RhbCA9IGRhdGEuZmFpbCArIGRhdGEuc2tpcCArIGRhdGEucGFzcztcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9XG4gICAgICAgICAgdG90YWwgPT09IDAgPyAwIDogKGRhdGFbdGhpcy4jY29uZmlnLm1ldHJpY10gLyB0b3RhbCkgKiAxMDA7XG4gICAgICAgIGxldCB2ZXJkaWN0OiBQb2xpY3lSZXN1bHQgPSBcInBhc3NcIjtcbiAgICAgICAgaWYgKHBlcmNlbnRhZ2UgPiB3YXJuKSB7XG4gICAgICAgICAgdmVyZGljdCA9IFwid2FyblwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwZXJjZW50YWdlID4gZmFpbCkge1xuICAgICAgICAgIHZlcmRpY3QgPSBcImZhaWxcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMudXBkYXRlRWxlbWVudChpdGVtLCB2ZXJkaWN0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGl0ZW0pO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IG1heFBlcmNlbnRhZ2VUZXN0UG9saWN5LCBNYXhQZXJjZW50YWdlVGVzdFBvbGljeSB9O1xuZXhwb3J0IHR5cGUgeyBNYXhQZXJjZW50YWdlVGVzdFBvbGljeUNvbmZpZyB9O1xuIl19