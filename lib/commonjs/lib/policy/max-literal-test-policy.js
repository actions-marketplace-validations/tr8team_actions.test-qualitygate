import { literal, number, object } from "zod";
import { testMetric } from "../enums";
import { BasePolicy } from "./base-policy";
const maxLiteralTestPolicy = object({
    type: literal("max-literal-test-policy"),
    metric: testMetric,
    warn: number().min(0),
    fail: number().min(0),
})
    .required()
    .strict();
class MaxLiteralTestPolicy extends BasePolicy {
    #config;
    constructor(name, target, config) {
        super(name, target);
        this.#config = config;
    }
    evaluate(current) {
        return this.filteredEvaluate(current, (item) => {
            if (item.data.type === "test-result") {
                const { data } = item;
                const warn = this.#config.warn;
                const fail = this.#config.fail;
                let verdict = "pass";
                if (data[this.#config.metric] > warn) {
                    verdict = "warn";
                }
                if (data[this.#config.metric] > fail) {
                    verdict = "fail";
                }
                return Promise.resolve(this.updateElement(item, verdict));
            }
            return Promise.resolve(item);
        });
    }
}
export { maxLiteralTestPolicy, MaxLiteralTestPolicy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4LWxpdGVyYWwtdGVzdC1wb2xpY3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3BvbGljeS9tYXgtbGl0ZXJhbC10ZXN0LXBvbGljeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUssTUFBTSxLQUFLLENBQUM7QUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxDQUFDO0lBQ2xDLElBQUksRUFBRSxPQUFPLENBQUMseUJBQXlCLENBQUM7SUFDeEMsTUFBTSxFQUFFLFVBQVU7SUFDbEIsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckIsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDdEIsQ0FBQztLQUNDLFFBQVEsRUFBRTtLQUNWLE1BQU0sRUFBRSxDQUFDO0FBSVosTUFBTSxvQkFBcUIsU0FBUSxVQUFVO0lBQ2xDLE9BQU8sQ0FBNkI7SUFFN0MsWUFDRSxJQUFZLEVBQ1osTUFBYyxFQUNkLE1BQWtDO1FBRWxDLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUVELFFBQVEsQ0FBQyxPQUEwQjtRQUNqQyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUM3QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLGFBQWEsRUFBRTtnQkFDcEMsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDdEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQy9CLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUMvQixJQUFJLE9BQU8sR0FBaUIsTUFBTSxDQUFDO2dCQUNuQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFBRTtvQkFDcEMsT0FBTyxHQUFHLE1BQU0sQ0FBQztpQkFDbEI7Z0JBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLEVBQUU7b0JBQ3BDLE9BQU8sR0FBRyxNQUFNLENBQUM7aUJBQ2xCO2dCQUNELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQzNEO1lBQ0QsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLG9CQUFvQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsaXRlcmFsLCBudW1iZXIsIG9iamVjdCwgeiB9IGZyb20gXCJ6b2RcIjtcbmltcG9ydCB7IHRlc3RNZXRyaWMgfSBmcm9tIFwiLi4vZW51bXNcIjtcbmltcG9ydCB7IFBvbGljeSB9IGZyb20gXCIuLi9pbnRlcmZhY2UvcG9saWN5XCI7XG5pbXBvcnQgeyBCYXNlUG9saWN5IH0gZnJvbSBcIi4vYmFzZS1wb2xpY3lcIjtcbmltcG9ydCB7IEludGVybWVkaWF0ZUVudHJ5LCBQb2xpY3lSZXN1bHQgfSBmcm9tIFwiLi4vb3V0cHV0XCI7XG5cbmNvbnN0IG1heExpdGVyYWxUZXN0UG9saWN5ID0gb2JqZWN0KHtcbiAgdHlwZTogbGl0ZXJhbChcIm1heC1saXRlcmFsLXRlc3QtcG9saWN5XCIpLFxuICBtZXRyaWM6IHRlc3RNZXRyaWMsXG4gIHdhcm46IG51bWJlcigpLm1pbigwKSxcbiAgZmFpbDogbnVtYmVyKCkubWluKDApLFxufSlcbiAgLnJlcXVpcmVkKClcbiAgLnN0cmljdCgpO1xuXG50eXBlIE1heExpdGVyYWxUZXN0UG9saWN5Q29uZmlnID0gei5pbmZlcjx0eXBlb2YgbWF4TGl0ZXJhbFRlc3RQb2xpY3k+O1xuXG5jbGFzcyBNYXhMaXRlcmFsVGVzdFBvbGljeSBleHRlbmRzIEJhc2VQb2xpY3kgaW1wbGVtZW50cyBQb2xpY3kge1xuICByZWFkb25seSAjY29uZmlnOiBNYXhMaXRlcmFsVGVzdFBvbGljeUNvbmZpZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgdGFyZ2V0OiBzdHJpbmcsXG4gICAgY29uZmlnOiBNYXhMaXRlcmFsVGVzdFBvbGljeUNvbmZpZ1xuICApIHtcbiAgICBzdXBlcihuYW1lLCB0YXJnZXQpO1xuICAgIHRoaXMuI2NvbmZpZyA9IGNvbmZpZztcbiAgfVxuXG4gIGV2YWx1YXRlKGN1cnJlbnQ6IEludGVybWVkaWF0ZUVudHJ5KTogUHJvbWlzZTxJbnRlcm1lZGlhdGVFbnRyeT4ge1xuICAgIHJldHVybiB0aGlzLmZpbHRlcmVkRXZhbHVhdGUoY3VycmVudCwgKGl0ZW0pID0+IHtcbiAgICAgIGlmIChpdGVtLmRhdGEudHlwZSA9PT0gXCJ0ZXN0LXJlc3VsdFwiKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gaXRlbTtcbiAgICAgICAgY29uc3Qgd2FybiA9IHRoaXMuI2NvbmZpZy53YXJuO1xuICAgICAgICBjb25zdCBmYWlsID0gdGhpcy4jY29uZmlnLmZhaWw7XG4gICAgICAgIGxldCB2ZXJkaWN0OiBQb2xpY3lSZXN1bHQgPSBcInBhc3NcIjtcbiAgICAgICAgaWYgKGRhdGFbdGhpcy4jY29uZmlnLm1ldHJpY10gPiB3YXJuKSB7XG4gICAgICAgICAgdmVyZGljdCA9IFwid2FyblwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhW3RoaXMuI2NvbmZpZy5tZXRyaWNdID4gZmFpbCkge1xuICAgICAgICAgIHZlcmRpY3QgPSBcImZhaWxcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMudXBkYXRlRWxlbWVudChpdGVtLCB2ZXJkaWN0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGl0ZW0pO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IG1heExpdGVyYWxUZXN0UG9saWN5LCBNYXhMaXRlcmFsVGVzdFBvbGljeSB9O1xuXG5leHBvcnQgdHlwZSB7IE1heExpdGVyYWxUZXN0UG9saWN5Q29uZmlnIH07XG4iXX0=