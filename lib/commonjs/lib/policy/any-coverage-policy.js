import { literal, number, object } from "zod";
import { BasePolicy } from "./base-policy";
const anyCoveragePolicy = object({
    type: literal("any-coverage-policy"),
    warn: number().min(0).max(100),
    fail: number().min(0).max(100),
})
    .required()
    .strict();
class AnyCoveragePolicy extends BasePolicy {
    #config;
    constructor(name, target, config) {
        super(name, target);
        this.#config = config;
    }
    evaluate(current) {
        return this.filteredEvaluate(current, (item) => {
            if (item.data.type === "test-coverage") {
                const { data } = item;
                let verdict = "pass";
                if (data.function < this.#config.warn ||
                    data.line < this.#config.warn ||
                    data.branch < this.#config.warn ||
                    data.statement < this.#config.warn) {
                    verdict = "warn";
                }
                if (data.function < this.#config.fail ||
                    data.line < this.#config.fail ||
                    data.branch < this.#config.fail ||
                    data.statement < this.#config.fail) {
                    verdict = "fail";
                }
                return Promise.resolve(this.updateElement(item, verdict));
            }
            return Promise.resolve(item);
        });
    }
}
export { AnyCoveragePolicy, anyCoveragePolicy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW55LWNvdmVyYWdlLXBvbGljeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvcG9saWN5L2FueS1jb3ZlcmFnZS1wb2xpY3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFLLE1BQU0sS0FBSyxDQUFDO0FBQ2pELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLENBQUM7SUFDL0IsSUFBSSxFQUFFLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztJQUNwQyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDOUIsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0NBQy9CLENBQUM7S0FDQyxRQUFRLEVBQUU7S0FDVixNQUFNLEVBQUUsQ0FBQztBQUlaLE1BQU0saUJBQWtCLFNBQVEsVUFBVTtJQUMvQixPQUFPLENBQTBCO0lBRTFDLFlBQVksSUFBWSxFQUFFLE1BQWMsRUFBRSxNQUErQjtRQUN2RSxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxRQUFRLENBQUMsT0FBMEI7UUFDakMsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDN0MsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxlQUFlLEVBQUU7Z0JBQ3RDLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ3RCLElBQUksT0FBTyxHQUFpQixNQUFNLENBQUM7Z0JBQ25DLElBQ0UsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUk7b0JBQ2pDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJO29CQUM3QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSTtvQkFDL0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFDbEM7b0JBQ0EsT0FBTyxHQUFHLE1BQU0sQ0FBQztpQkFDbEI7Z0JBQ0QsSUFDRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSTtvQkFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUk7b0JBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJO29CQUMvQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUNsQztvQkFDQSxPQUFPLEdBQUcsTUFBTSxDQUFDO2lCQUNsQjtnQkFDRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUMzRDtZQUNELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQUVELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxpQkFBaUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUG9saWN5IH0gZnJvbSBcIi4uL2ludGVyZmFjZS9wb2xpY3lcIjtcbmltcG9ydCB7IEludGVybWVkaWF0ZUVudHJ5LCBQb2xpY3lSZXN1bHQgfSBmcm9tIFwiLi4vb3V0cHV0XCI7XG5pbXBvcnQgeyBsaXRlcmFsLCBudW1iZXIsIG9iamVjdCwgeiB9IGZyb20gXCJ6b2RcIjtcbmltcG9ydCB7IEJhc2VQb2xpY3kgfSBmcm9tIFwiLi9iYXNlLXBvbGljeVwiO1xuXG5jb25zdCBhbnlDb3ZlcmFnZVBvbGljeSA9IG9iamVjdCh7XG4gIHR5cGU6IGxpdGVyYWwoXCJhbnktY292ZXJhZ2UtcG9saWN5XCIpLFxuICB3YXJuOiBudW1iZXIoKS5taW4oMCkubWF4KDEwMCksXG4gIGZhaWw6IG51bWJlcigpLm1pbigwKS5tYXgoMTAwKSxcbn0pXG4gIC5yZXF1aXJlZCgpXG4gIC5zdHJpY3QoKTtcblxudHlwZSBBbnlDb3ZlcmFnZVBvbGljeUNvbmZpZyA9IHouaW5mZXI8dHlwZW9mIGFueUNvdmVyYWdlUG9saWN5PjtcblxuY2xhc3MgQW55Q292ZXJhZ2VQb2xpY3kgZXh0ZW5kcyBCYXNlUG9saWN5IGltcGxlbWVudHMgUG9saWN5IHtcbiAgcmVhZG9ubHkgI2NvbmZpZzogQW55Q292ZXJhZ2VQb2xpY3lDb25maWc7XG5cbiAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCB0YXJnZXQ6IHN0cmluZywgY29uZmlnOiBBbnlDb3ZlcmFnZVBvbGljeUNvbmZpZykge1xuICAgIHN1cGVyKG5hbWUsIHRhcmdldCk7XG4gICAgdGhpcy4jY29uZmlnID0gY29uZmlnO1xuICB9XG5cbiAgZXZhbHVhdGUoY3VycmVudDogSW50ZXJtZWRpYXRlRW50cnkpOiBQcm9taXNlPEludGVybWVkaWF0ZUVudHJ5PiB7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyZWRFdmFsdWF0ZShjdXJyZW50LCAoaXRlbSkgPT4ge1xuICAgICAgaWYgKGl0ZW0uZGF0YS50eXBlID09PSBcInRlc3QtY292ZXJhZ2VcIikge1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGl0ZW07XG4gICAgICAgIGxldCB2ZXJkaWN0OiBQb2xpY3lSZXN1bHQgPSBcInBhc3NcIjtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGRhdGEuZnVuY3Rpb24gPCB0aGlzLiNjb25maWcud2FybiB8fFxuICAgICAgICAgIGRhdGEubGluZSA8IHRoaXMuI2NvbmZpZy53YXJuIHx8XG4gICAgICAgICAgZGF0YS5icmFuY2ggPCB0aGlzLiNjb25maWcud2FybiB8fFxuICAgICAgICAgIGRhdGEuc3RhdGVtZW50IDwgdGhpcy4jY29uZmlnLndhcm5cbiAgICAgICAgKSB7XG4gICAgICAgICAgdmVyZGljdCA9IFwid2FyblwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICBkYXRhLmZ1bmN0aW9uIDwgdGhpcy4jY29uZmlnLmZhaWwgfHxcbiAgICAgICAgICBkYXRhLmxpbmUgPCB0aGlzLiNjb25maWcuZmFpbCB8fFxuICAgICAgICAgIGRhdGEuYnJhbmNoIDwgdGhpcy4jY29uZmlnLmZhaWwgfHxcbiAgICAgICAgICBkYXRhLnN0YXRlbWVudCA8IHRoaXMuI2NvbmZpZy5mYWlsXG4gICAgICAgICkge1xuICAgICAgICAgIHZlcmRpY3QgPSBcImZhaWxcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMudXBkYXRlRWxlbWVudChpdGVtLCB2ZXJkaWN0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGl0ZW0pO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IEFueUNvdmVyYWdlUG9saWN5LCBhbnlDb3ZlcmFnZVBvbGljeSB9O1xuZXhwb3J0IHR5cGUgeyBBbnlDb3ZlcmFnZVBvbGljeUNvbmZpZyB9O1xuIl19