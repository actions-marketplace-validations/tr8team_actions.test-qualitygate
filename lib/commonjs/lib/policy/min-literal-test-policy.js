import { literal, number, object } from "zod";
import { testMetric } from "../enums";
import { BasePolicy } from "./base-policy";
const minLiteralTestPolicy = object({
    type: literal("min-literal-test-policy"),
    metric: testMetric,
    warn: number().min(0),
    fail: number().min(0),
}).strict();
class MinLiteralTestPolicy extends BasePolicy {
    #config;
    constructor(name, target, config) {
        super(name, target);
        this.#config = config;
    }
    evaluate(current) {
        return this.filteredEvaluate(current, (item) => {
            if (item.data.type === "test-result") {
                const { data } = item;
                const warn = this.#config.warn;
                const fail = this.#config.fail;
                let verdict = "pass";
                if (data[this.#config.metric] < warn) {
                    verdict = "warn";
                }
                if (data[this.#config.metric] < fail) {
                    verdict = "fail";
                }
                return Promise.resolve(this.updateElement(item, verdict));
            }
            return Promise.resolve(item);
        });
    }
}
export { minLiteralTestPolicy, MinLiteralTestPolicy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluLWxpdGVyYWwtdGVzdC1wb2xpY3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3BvbGljeS9taW4tbGl0ZXJhbC10ZXN0LXBvbGljeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUssTUFBTSxLQUFLLENBQUM7QUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxDQUFDO0lBQ2xDLElBQUksRUFBRSxPQUFPLENBQUMseUJBQXlCLENBQUM7SUFDeEMsTUFBTSxFQUFFLFVBQVU7SUFDbEIsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckIsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDdEIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBSVosTUFBTSxvQkFBcUIsU0FBUSxVQUFVO0lBQ2xDLE9BQU8sQ0FBNkI7SUFFN0MsWUFDRSxJQUFZLEVBQ1osTUFBYyxFQUNkLE1BQWtDO1FBRWxDLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUVELFFBQVEsQ0FBQyxPQUEwQjtRQUNqQyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUM3QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLGFBQWEsRUFBRTtnQkFDcEMsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDdEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQy9CLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUMvQixJQUFJLE9BQU8sR0FBaUIsTUFBTSxDQUFDO2dCQUNuQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFBRTtvQkFDcEMsT0FBTyxHQUFHLE1BQU0sQ0FBQztpQkFDbEI7Z0JBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLEVBQUU7b0JBQ3BDLE9BQU8sR0FBRyxNQUFNLENBQUM7aUJBQ2xCO2dCQUNELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQzNEO1lBQ0QsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLG9CQUFvQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsaXRlcmFsLCBudW1iZXIsIG9iamVjdCwgeiB9IGZyb20gXCJ6b2RcIjtcbmltcG9ydCB7IHRlc3RNZXRyaWMgfSBmcm9tIFwiLi4vZW51bXNcIjtcbmltcG9ydCB7IFBvbGljeSB9IGZyb20gXCIuLi9pbnRlcmZhY2UvcG9saWN5XCI7XG5pbXBvcnQgeyBCYXNlUG9saWN5IH0gZnJvbSBcIi4vYmFzZS1wb2xpY3lcIjtcbmltcG9ydCB7IEludGVybWVkaWF0ZUVudHJ5LCBQb2xpY3lSZXN1bHQgfSBmcm9tIFwiLi4vb3V0cHV0XCI7XG5cbmNvbnN0IG1pbkxpdGVyYWxUZXN0UG9saWN5ID0gb2JqZWN0KHtcbiAgdHlwZTogbGl0ZXJhbChcIm1pbi1saXRlcmFsLXRlc3QtcG9saWN5XCIpLFxuICBtZXRyaWM6IHRlc3RNZXRyaWMsXG4gIHdhcm46IG51bWJlcigpLm1pbigwKSxcbiAgZmFpbDogbnVtYmVyKCkubWluKDApLFxufSkuc3RyaWN0KCk7XG5cbnR5cGUgTWluTGl0ZXJhbFRlc3RQb2xpY3lDb25maWcgPSB6LmluZmVyPHR5cGVvZiBtaW5MaXRlcmFsVGVzdFBvbGljeT47XG5cbmNsYXNzIE1pbkxpdGVyYWxUZXN0UG9saWN5IGV4dGVuZHMgQmFzZVBvbGljeSBpbXBsZW1lbnRzIFBvbGljeSB7XG4gIHJlYWRvbmx5ICNjb25maWc6IE1pbkxpdGVyYWxUZXN0UG9saWN5Q29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICB0YXJnZXQ6IHN0cmluZyxcbiAgICBjb25maWc6IE1pbkxpdGVyYWxUZXN0UG9saWN5Q29uZmlnXG4gICkge1xuICAgIHN1cGVyKG5hbWUsIHRhcmdldCk7XG4gICAgdGhpcy4jY29uZmlnID0gY29uZmlnO1xuICB9XG5cbiAgZXZhbHVhdGUoY3VycmVudDogSW50ZXJtZWRpYXRlRW50cnkpOiBQcm9taXNlPEludGVybWVkaWF0ZUVudHJ5PiB7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyZWRFdmFsdWF0ZShjdXJyZW50LCAoaXRlbSkgPT4ge1xuICAgICAgaWYgKGl0ZW0uZGF0YS50eXBlID09PSBcInRlc3QtcmVzdWx0XCIpIHtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBpdGVtO1xuICAgICAgICBjb25zdCB3YXJuID0gdGhpcy4jY29uZmlnLndhcm47XG4gICAgICAgIGNvbnN0IGZhaWwgPSB0aGlzLiNjb25maWcuZmFpbDtcbiAgICAgICAgbGV0IHZlcmRpY3Q6IFBvbGljeVJlc3VsdCA9IFwicGFzc1wiO1xuICAgICAgICBpZiAoZGF0YVt0aGlzLiNjb25maWcubWV0cmljXSA8IHdhcm4pIHtcbiAgICAgICAgICB2ZXJkaWN0ID0gXCJ3YXJuXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGFbdGhpcy4jY29uZmlnLm1ldHJpY10gPCBmYWlsKSB7XG4gICAgICAgICAgdmVyZGljdCA9IFwiZmFpbFwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy51cGRhdGVFbGVtZW50KGl0ZW0sIHZlcmRpY3QpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaXRlbSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgbWluTGl0ZXJhbFRlc3RQb2xpY3ksIE1pbkxpdGVyYWxUZXN0UG9saWN5IH07XG5cbmV4cG9ydCB0eXBlIHsgTWluTGl0ZXJhbFRlc3RQb2xpY3lDb25maWcgfTtcbiJdfQ==