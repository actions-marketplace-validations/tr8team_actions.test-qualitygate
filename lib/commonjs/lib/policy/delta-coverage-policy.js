import { literal, number, object } from "zod";
import { BasePolicy } from "./base-policy";
import { coverageMetric } from "../enums";
const deltaCoveragePolicy = object({
    type: literal("delta-coverage-policy"),
    warn: number().min(-100).max(100),
    fail: number().min(-100).max(100),
    metric: coverageMetric,
}).strict();
class DeltaCoveragePolicy extends BasePolicy {
    #config;
    constructor(name, target, config) {
        super(name, target);
        this.#config = config;
    }
    evaluate(current) {
        return this.filteredEvaluate(current, (item) => {
            if (item.data.type === "test-coverage") {
                const { data } = item;
                return data.delta
                    .map((delta) => {
                    const warn = data[this.#config.metric] === 100
                        ? Math.min(this.#config.warn, delta[this.#config.metric])
                        : this.#config.warn;
                    const fail = data[this.#config.metric] === 100
                        ? Math.min(this.#config.fail, delta[this.#config.metric])
                        : this.#config.fail;
                    let verdict = "pass";
                    if (delta[this.#config.metric] < warn) {
                        verdict = "warn";
                    }
                    if (delta[this.#config.metric] < fail) {
                        verdict = "fail";
                    }
                    return this.updateElement(item, verdict);
                })
                    .unwrapOr(item);
            }
            return Promise.resolve(item);
        });
    }
}
export { deltaCoveragePolicy, DeltaCoveragePolicy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsdGEtY292ZXJhZ2UtcG9saWN5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9wb2xpY3kvZGVsdGEtY292ZXJhZ2UtcG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBSyxNQUFNLEtBQUssQ0FBQztBQUNqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFMUMsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLENBQUM7SUFDakMsSUFBSSxFQUFFLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztJQUN0QyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUNqQyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUNqQyxNQUFNLEVBQUUsY0FBYztDQUN2QixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7QUFJWixNQUFNLG1CQUFvQixTQUFRLFVBQVU7SUFDakMsT0FBTyxDQUE0QjtJQUU1QyxZQUFZLElBQVksRUFBRSxNQUFjLEVBQUUsTUFBaUM7UUFDekUsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN4QixDQUFDO0lBRUQsUUFBUSxDQUFDLE9BQTBCO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQzdDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssZUFBZSxFQUFFO2dCQUN0QyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUN0QixPQUFPLElBQUksQ0FBQyxLQUFLO3FCQUNkLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUNiLE1BQU0sSUFBSSxHQUNSLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUc7d0JBQy9CLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO3dCQUN6RCxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7b0JBRXhCLE1BQU0sSUFBSSxHQUNSLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUc7d0JBQy9CLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO3dCQUN6RCxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7b0JBRXhCLElBQUksT0FBTyxHQUFpQixNQUFNLENBQUM7b0JBQ25DLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxFQUFFO3dCQUNyQyxPQUFPLEdBQUcsTUFBTSxDQUFDO3FCQUNsQjtvQkFDRCxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFBRTt3QkFDckMsT0FBTyxHQUFHLE1BQU0sQ0FBQztxQkFDbEI7b0JBQ0QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDM0MsQ0FBQyxDQUFDO3FCQUNELFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNuQjtZQUNELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQUVELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbGl0ZXJhbCwgbnVtYmVyLCBvYmplY3QsIHogfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQgeyBCYXNlUG9saWN5IH0gZnJvbSBcIi4vYmFzZS1wb2xpY3lcIjtcbmltcG9ydCB7IFBvbGljeSB9IGZyb20gXCIuLi9pbnRlcmZhY2UvcG9saWN5XCI7XG5pbXBvcnQgeyBJbnRlcm1lZGlhdGVFbnRyeSwgUG9saWN5UmVzdWx0IH0gZnJvbSBcIi4uL291dHB1dFwiO1xuaW1wb3J0IHsgY292ZXJhZ2VNZXRyaWMgfSBmcm9tIFwiLi4vZW51bXNcIjtcblxuY29uc3QgZGVsdGFDb3ZlcmFnZVBvbGljeSA9IG9iamVjdCh7XG4gIHR5cGU6IGxpdGVyYWwoXCJkZWx0YS1jb3ZlcmFnZS1wb2xpY3lcIiksXG4gIHdhcm46IG51bWJlcigpLm1pbigtMTAwKS5tYXgoMTAwKSxcbiAgZmFpbDogbnVtYmVyKCkubWluKC0xMDApLm1heCgxMDApLFxuICBtZXRyaWM6IGNvdmVyYWdlTWV0cmljLFxufSkuc3RyaWN0KCk7XG5cbnR5cGUgRGVsdGFDb3ZlcmFnZVBvbGljeUNvbmZpZyA9IHouaW5mZXI8dHlwZW9mIGRlbHRhQ292ZXJhZ2VQb2xpY3k+O1xuXG5jbGFzcyBEZWx0YUNvdmVyYWdlUG9saWN5IGV4dGVuZHMgQmFzZVBvbGljeSBpbXBsZW1lbnRzIFBvbGljeSB7XG4gIHJlYWRvbmx5ICNjb25maWc6IERlbHRhQ292ZXJhZ2VQb2xpY3lDb25maWc7XG5cbiAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCB0YXJnZXQ6IHN0cmluZywgY29uZmlnOiBEZWx0YUNvdmVyYWdlUG9saWN5Q29uZmlnKSB7XG4gICAgc3VwZXIobmFtZSwgdGFyZ2V0KTtcbiAgICB0aGlzLiNjb25maWcgPSBjb25maWc7XG4gIH1cblxuICBldmFsdWF0ZShjdXJyZW50OiBJbnRlcm1lZGlhdGVFbnRyeSk6IFByb21pc2U8SW50ZXJtZWRpYXRlRW50cnk+IHtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJlZEV2YWx1YXRlKGN1cnJlbnQsIChpdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbS5kYXRhLnR5cGUgPT09IFwidGVzdC1jb3ZlcmFnZVwiKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gaXRlbTtcbiAgICAgICAgcmV0dXJuIGRhdGEuZGVsdGFcbiAgICAgICAgICAubWFwKChkZWx0YSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgd2FybiA9XG4gICAgICAgICAgICAgIGRhdGFbdGhpcy4jY29uZmlnLm1ldHJpY10gPT09IDEwMFxuICAgICAgICAgICAgICAgID8gTWF0aC5taW4odGhpcy4jY29uZmlnLndhcm4sIGRlbHRhW3RoaXMuI2NvbmZpZy5tZXRyaWNdKVxuICAgICAgICAgICAgICAgIDogdGhpcy4jY29uZmlnLndhcm47XG5cbiAgICAgICAgICAgIGNvbnN0IGZhaWwgPVxuICAgICAgICAgICAgICBkYXRhW3RoaXMuI2NvbmZpZy5tZXRyaWNdID09PSAxMDBcbiAgICAgICAgICAgICAgICA/IE1hdGgubWluKHRoaXMuI2NvbmZpZy5mYWlsLCBkZWx0YVt0aGlzLiNjb25maWcubWV0cmljXSlcbiAgICAgICAgICAgICAgICA6IHRoaXMuI2NvbmZpZy5mYWlsO1xuXG4gICAgICAgICAgICBsZXQgdmVyZGljdDogUG9saWN5UmVzdWx0ID0gXCJwYXNzXCI7XG4gICAgICAgICAgICBpZiAoZGVsdGFbdGhpcy4jY29uZmlnLm1ldHJpY10gPCB3YXJuKSB7XG4gICAgICAgICAgICAgIHZlcmRpY3QgPSBcIndhcm5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZWx0YVt0aGlzLiNjb25maWcubWV0cmljXSA8IGZhaWwpIHtcbiAgICAgICAgICAgICAgdmVyZGljdCA9IFwiZmFpbFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlRWxlbWVudChpdGVtLCB2ZXJkaWN0KTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC51bndyYXBPcihpdGVtKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaXRlbSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgZGVsdGFDb3ZlcmFnZVBvbGljeSwgRGVsdGFDb3ZlcmFnZVBvbGljeSB9O1xuZXhwb3J0IHR5cGUgeyBEZWx0YUNvdmVyYWdlUG9saWN5Q29uZmlnIH07XG4iXX0=