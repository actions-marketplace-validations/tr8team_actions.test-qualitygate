class BasePolicy {
    #target;
    #name;
    constructor(name, target) {
        this.#name = name;
        this.#target = target;
    }
    async filteredEvaluate(current, mapper) {
        const { items, ...c } = current;
        const mapped = items.map((e) => e.name === this.#target ? mapper(e) : Promise.resolve(e));
        const awaited = await Promise.all(mapped);
        return {
            ...c,
            items: awaited,
        };
    }
    updatePolicyData(prev, verdict) {
        const rd = {
            fail: [...prev.fail],
            warn: [...prev.warn],
            pass: [...prev.pass],
        };
        if (verdict === "fail") {
            rd.fail.push(this.#name);
        }
        else if (verdict === "warn") {
            rd.warn.push(this.#name);
        }
        else {
            rd.pass.push(this.#name);
        }
        return rd;
    }
    updateElement(prev, verdict) {
        const { url, name, data } = prev;
        const { resultDetails, ...ret } = data;
        const rd = this.updatePolicyData(resultDetails, verdict);
        return {
            name,
            url,
            data: {
                ...ret,
                resultDetails: rd,
            },
        };
    }
}
export { BasePolicy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1wb2xpY3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3BvbGljeS9iYXNlLXBvbGljeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxNQUFNLFVBQVU7SUFDTCxPQUFPLENBQVM7SUFDaEIsS0FBSyxDQUFTO0lBRXZCLFlBQVksSUFBWSxFQUFFLE1BQWM7UUFDdEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUVELEtBQUssQ0FBQyxnQkFBZ0IsQ0FDcEIsT0FBMEIsRUFDMUIsTUFBZ0U7UUFFaEUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUNoQyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDN0IsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQ3pELENBQUM7UUFDRixNQUFNLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUMsT0FBTztZQUNMLEdBQUcsQ0FBQztZQUNKLEtBQUssRUFBRSxPQUFPO1NBQ2YsQ0FBQztJQUNKLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxJQUFnQixFQUFFLE9BQXFCO1FBQ3RELE1BQU0sRUFBRSxHQUFHO1lBQ1QsSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3BCLElBQUksRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNwQixJQUFJLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDckIsQ0FBQztRQUNGLElBQUksT0FBTyxLQUFLLE1BQU0sRUFBRTtZQUN0QixFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDMUI7YUFBTSxJQUFJLE9BQU8sS0FBSyxNQUFNLEVBQUU7WUFDN0IsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzFCO2FBQU07WUFDTCxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDMUI7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxhQUFhLENBQ1gsSUFBeUIsRUFDekIsT0FBcUI7UUFFckIsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLE1BQU0sRUFBRSxhQUFhLEVBQUUsR0FBRyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDdkMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN6RCxPQUFPO1lBQ0wsSUFBSTtZQUNKLEdBQUc7WUFDSCxJQUFJLEVBQUU7Z0JBQ0osR0FBRyxHQUFHO2dCQUNOLGFBQWEsRUFBRSxFQUFFO2FBQ2xCO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVELE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEludGVybWVkaWF0ZUVsZW1lbnQsXG4gIEludGVybWVkaWF0ZUVudHJ5LFxuICBQb2xpY3lEYXRhLFxuICBQb2xpY3lSZXN1bHQsXG59IGZyb20gXCIuLi9vdXRwdXRcIjtcblxuY2xhc3MgQmFzZVBvbGljeSB7XG4gIHJlYWRvbmx5ICN0YXJnZXQ6IHN0cmluZztcbiAgcmVhZG9ubHkgI25hbWU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHRhcmdldDogc3RyaW5nKSB7XG4gICAgdGhpcy4jbmFtZSA9IG5hbWU7XG4gICAgdGhpcy4jdGFyZ2V0ID0gdGFyZ2V0O1xuICB9XG5cbiAgYXN5bmMgZmlsdGVyZWRFdmFsdWF0ZShcbiAgICBjdXJyZW50OiBJbnRlcm1lZGlhdGVFbnRyeSxcbiAgICBtYXBwZXI6IChpOiBJbnRlcm1lZGlhdGVFbGVtZW50KSA9PiBQcm9taXNlPEludGVybWVkaWF0ZUVsZW1lbnQ+XG4gICk6IFByb21pc2U8SW50ZXJtZWRpYXRlRW50cnk+IHtcbiAgICBjb25zdCB7IGl0ZW1zLCAuLi5jIH0gPSBjdXJyZW50O1xuICAgIGNvbnN0IG1hcHBlZCA9IGl0ZW1zLm1hcCgoZSkgPT5cbiAgICAgIGUubmFtZSA9PT0gdGhpcy4jdGFyZ2V0ID8gbWFwcGVyKGUpIDogUHJvbWlzZS5yZXNvbHZlKGUpXG4gICAgKTtcbiAgICBjb25zdCBhd2FpdGVkID0gYXdhaXQgUHJvbWlzZS5hbGwobWFwcGVkKTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uYyxcbiAgICAgIGl0ZW1zOiBhd2FpdGVkLFxuICAgIH07XG4gIH1cblxuICB1cGRhdGVQb2xpY3lEYXRhKHByZXY6IFBvbGljeURhdGEsIHZlcmRpY3Q6IFBvbGljeVJlc3VsdCk6IFBvbGljeURhdGEge1xuICAgIGNvbnN0IHJkID0ge1xuICAgICAgZmFpbDogWy4uLnByZXYuZmFpbF0sXG4gICAgICB3YXJuOiBbLi4ucHJldi53YXJuXSxcbiAgICAgIHBhc3M6IFsuLi5wcmV2LnBhc3NdLFxuICAgIH07XG4gICAgaWYgKHZlcmRpY3QgPT09IFwiZmFpbFwiKSB7XG4gICAgICByZC5mYWlsLnB1c2godGhpcy4jbmFtZSk7XG4gICAgfSBlbHNlIGlmICh2ZXJkaWN0ID09PSBcIndhcm5cIikge1xuICAgICAgcmQud2Fybi5wdXNoKHRoaXMuI25hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZC5wYXNzLnB1c2godGhpcy4jbmFtZSk7XG4gICAgfVxuICAgIHJldHVybiByZDtcbiAgfVxuXG4gIHVwZGF0ZUVsZW1lbnQoXG4gICAgcHJldjogSW50ZXJtZWRpYXRlRWxlbWVudCxcbiAgICB2ZXJkaWN0OiBQb2xpY3lSZXN1bHRcbiAgKTogSW50ZXJtZWRpYXRlRWxlbWVudCB7XG4gICAgY29uc3QgeyB1cmwsIG5hbWUsIGRhdGEgfSA9IHByZXY7XG4gICAgY29uc3QgeyByZXN1bHREZXRhaWxzLCAuLi5yZXQgfSA9IGRhdGE7XG4gICAgY29uc3QgcmQgPSB0aGlzLnVwZGF0ZVBvbGljeURhdGEocmVzdWx0RGV0YWlscywgdmVyZGljdCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWUsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIC4uLnJldCxcbiAgICAgICAgcmVzdWx0RGV0YWlsczogcmQsXG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IHsgQmFzZVBvbGljeSB9O1xuIl19