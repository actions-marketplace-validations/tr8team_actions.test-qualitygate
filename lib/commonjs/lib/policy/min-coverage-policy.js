import { literal, number, object } from "zod";
import { coverageMetric } from "../enums";
import { BasePolicy } from "./base-policy";
const minCoveragePolicy = object({
    type: literal("min-coverage-policy"),
    metric: coverageMetric,
    warn: number().min(0).max(100),
    fail: number().min(0).max(100),
})
    .required()
    .strict();
class MinCoveragePolicy extends BasePolicy {
    #config;
    constructor(name, target, cofing) {
        super(name, target);
        this.#config = cofing;
    }
    evaluate(current) {
        return this.filteredEvaluate(current, (item) => {
            if (item.data.type === "test-coverage") {
                const { data } = item;
                let verdict = "pass";
                if (data[this.#config.metric] < this.#config.warn) {
                    verdict = "warn";
                }
                if (data[this.#config.metric] < this.#config.fail) {
                    verdict = "fail";
                }
                return Promise.resolve(this.updateElement(item, verdict));
            }
            return Promise.resolve(item);
        });
    }
}
export { minCoveragePolicy, MinCoveragePolicy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluLWNvdmVyYWdlLXBvbGljeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvcG9saWN5L21pbi1jb3ZlcmFnZS1wb2xpY3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFLLE1BQU0sS0FBSyxDQUFDO0FBQ2pELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDMUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxNQUFNLGlCQUFpQixHQUFHLE1BQU0sQ0FBQztJQUMvQixJQUFJLEVBQUUsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0lBQ3BDLE1BQU0sRUFBRSxjQUFjO0lBQ3RCLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUM5QixJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7Q0FDL0IsQ0FBQztLQUNDLFFBQVEsRUFBRTtLQUNWLE1BQU0sRUFBRSxDQUFDO0FBSVosTUFBTSxpQkFBa0IsU0FBUSxVQUFVO0lBQy9CLE9BQU8sQ0FBMEI7SUFFMUMsWUFBWSxJQUFZLEVBQUUsTUFBYyxFQUFFLE1BQStCO1FBQ3ZFLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUVELFFBQVEsQ0FBQyxPQUEwQjtRQUNqQyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUM3QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLGVBQWUsRUFBRTtnQkFDdEMsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDdEIsSUFBSSxPQUFPLEdBQWlCLE1BQU0sQ0FBQztnQkFDbkMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtvQkFDakQsT0FBTyxHQUFHLE1BQU0sQ0FBQztpQkFDbEI7Z0JBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtvQkFDakQsT0FBTyxHQUFHLE1BQU0sQ0FBQztpQkFDbEI7Z0JBQ0QsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFDM0Q7WUFDRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxpdGVyYWwsIG51bWJlciwgb2JqZWN0LCB6IH0gZnJvbSBcInpvZFwiO1xuaW1wb3J0IHsgY292ZXJhZ2VNZXRyaWMgfSBmcm9tIFwiLi4vZW51bXNcIjtcbmltcG9ydCB7IEJhc2VQb2xpY3kgfSBmcm9tIFwiLi9iYXNlLXBvbGljeVwiO1xuaW1wb3J0IHsgUG9saWN5IH0gZnJvbSBcIi4uL2ludGVyZmFjZS9wb2xpY3lcIjtcbmltcG9ydCB7IEludGVybWVkaWF0ZUVudHJ5LCBQb2xpY3lSZXN1bHQgfSBmcm9tIFwiLi4vb3V0cHV0XCI7XG5cbmNvbnN0IG1pbkNvdmVyYWdlUG9saWN5ID0gb2JqZWN0KHtcbiAgdHlwZTogbGl0ZXJhbChcIm1pbi1jb3ZlcmFnZS1wb2xpY3lcIiksXG4gIG1ldHJpYzogY292ZXJhZ2VNZXRyaWMsXG4gIHdhcm46IG51bWJlcigpLm1pbigwKS5tYXgoMTAwKSxcbiAgZmFpbDogbnVtYmVyKCkubWluKDApLm1heCgxMDApLFxufSlcbiAgLnJlcXVpcmVkKClcbiAgLnN0cmljdCgpO1xuXG50eXBlIE1pbkNvdmVyYWdlUG9saWN5Q29uZmlnID0gei5pbmZlcjx0eXBlb2YgbWluQ292ZXJhZ2VQb2xpY3k+O1xuXG5jbGFzcyBNaW5Db3ZlcmFnZVBvbGljeSBleHRlbmRzIEJhc2VQb2xpY3kgaW1wbGVtZW50cyBQb2xpY3kge1xuICByZWFkb25seSAjY29uZmlnOiBNaW5Db3ZlcmFnZVBvbGljeUNvbmZpZztcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHRhcmdldDogc3RyaW5nLCBjb2Zpbmc6IE1pbkNvdmVyYWdlUG9saWN5Q29uZmlnKSB7XG4gICAgc3VwZXIobmFtZSwgdGFyZ2V0KTtcbiAgICB0aGlzLiNjb25maWcgPSBjb2Zpbmc7XG4gIH1cblxuICBldmFsdWF0ZShjdXJyZW50OiBJbnRlcm1lZGlhdGVFbnRyeSk6IFByb21pc2U8SW50ZXJtZWRpYXRlRW50cnk+IHtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJlZEV2YWx1YXRlKGN1cnJlbnQsIChpdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbS5kYXRhLnR5cGUgPT09IFwidGVzdC1jb3ZlcmFnZVwiKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gaXRlbTtcbiAgICAgICAgbGV0IHZlcmRpY3Q6IFBvbGljeVJlc3VsdCA9IFwicGFzc1wiO1xuICAgICAgICBpZiAoZGF0YVt0aGlzLiNjb25maWcubWV0cmljXSA8IHRoaXMuI2NvbmZpZy53YXJuKSB7XG4gICAgICAgICAgdmVyZGljdCA9IFwid2FyblwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhW3RoaXMuI2NvbmZpZy5tZXRyaWNdIDwgdGhpcy4jY29uZmlnLmZhaWwpIHtcbiAgICAgICAgICB2ZXJkaWN0ID0gXCJmYWlsXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnVwZGF0ZUVsZW1lbnQoaXRlbSwgdmVyZGljdCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShpdGVtKTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgeyBtaW5Db3ZlcmFnZVBvbGljeSwgTWluQ292ZXJhZ2VQb2xpY3kgfTtcblxuZXhwb3J0IHR5cGUgeyBNaW5Db3ZlcmFnZVBvbGljeUNvbmZpZyB9O1xuIl19