import { Some } from "../core/option";
class IoInputRetriever {
    #io;
    #historyEntryValidator;
    #historyValidator;
    #policyConfigsValidator;
    retrieve() {
        const current = this.#io.getObject("current", Some(this.#historyEntryValidator));
        const base = this.#io.getOptionalObject("base", Some(this.#historyEntryValidator));
        const history = this.#io.getObject("history", Some(this.#historyValidator));
        const policyConfigs = this.#io.getObject("policies", Some(this.#policyConfigsValidator));
        return current.andThen((c) => base.andThen((b) => history.andThen((h) => policyConfigs.map((p) => ({ current: c, base: b, history: h, policies: p })))));
    }
    constructor(io, historyEntryValidator, historyValidator, policyConfigsValidator) {
        this.#io = io;
        this.#historyEntryValidator = historyEntryValidator;
        this.#historyValidator = historyValidator;
        this.#policyConfigsValidator = policyConfigsValidator;
    }
}
export { IoInputRetriever };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW8taW5wdXQtcmV0cmlldmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9hZGFwdGVycy9pby1pbnB1dC1yZXRyaWV2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsT0FBTyxFQUFVLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlDLE1BQU0sZ0JBQWdCO0lBQ1gsR0FBRyxDQUFXO0lBQ2Qsc0JBQXNCLENBQTBCO0lBQ2hELGlCQUFpQixDQUFxQjtJQUN0Qyx1QkFBdUIsQ0FBMkI7SUFFM0QsUUFBUTtRQUNOLE1BQU0sT0FBTyxHQUFnQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FDN0QsU0FBUyxFQUNULElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FDbEMsQ0FBQztRQUNGLE1BQU0sSUFBSSxHQUdOLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1FBQzFFLE1BQU0sT0FBTyxHQUEyQixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FDeEQsU0FBUyxFQUNULElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FDN0IsQ0FBQztRQUNGLE1BQU0sYUFBYSxHQUFpQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FDcEUsVUFBVSxFQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FDbkMsQ0FBQztRQUVGLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQWUsRUFBRSxFQUFFLENBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUF1QixFQUFFLEVBQUUsQ0FDdkMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQVUsRUFBRSxFQUFFLENBQzdCLGFBQWEsQ0FBQyxHQUFHLENBQ2YsQ0FBQyxDQUFnQixFQUFFLEVBQUUsQ0FDbkIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQWtCLENBQUEsQ0FDcEUsQ0FDRixDQUNGLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCxZQUNFLEVBQVksRUFDWixxQkFBOEMsRUFDOUMsZ0JBQW9DLEVBQ3BDLHNCQUFnRDtRQUVoRCxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxxQkFBcUIsQ0FBQztRQUNwRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsZ0JBQWdCLENBQUM7UUFDMUMsSUFBSSxDQUFDLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0lBQ3hELENBQUM7Q0FDRjtBQUVELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uSW5wdXQsIElucHV0UmV0cmlldmVyIH0gZnJvbSBcIi4uL2ludGVyZmFjZS9pbnB1dC1yZXRyaWV2ZXJcIjtcbmltcG9ydCB7IEFjdGlvbklPIH0gZnJvbSBcIi4uL2ludGVyZmFjZS9pb1wiO1xuaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSBcIi4uL2NvcmUvcmVzdWx0XCI7XG5pbXBvcnQgeyBWYWxpZGF0b3IgfSBmcm9tIFwiLi4vaW50ZXJmYWNlL3ZhbGlkYXRvclwiO1xuaW1wb3J0IHsgSGlzdG9yeUVudHJ5LCBIaXN0b3J5IH0gZnJvbSBcIi4uL2hpc3RvcnlcIjtcbmltcG9ydCB7IFBvbGljeUNvbmZpZ3MgfSBmcm9tIFwiLi4vcG9saWN5LWNvbmZpZ1wiO1xuaW1wb3J0IHsgT3B0aW9uLCBTb21lIH0gZnJvbSBcIi4uL2NvcmUvb3B0aW9uXCI7XG5cbmNsYXNzIElvSW5wdXRSZXRyaWV2ZXIgaW1wbGVtZW50cyBJbnB1dFJldHJpZXZlciB7XG4gIHJlYWRvbmx5ICNpbzogQWN0aW9uSU87XG4gIHJlYWRvbmx5ICNoaXN0b3J5RW50cnlWYWxpZGF0b3I6IFZhbGlkYXRvcjxIaXN0b3J5RW50cnk+O1xuICByZWFkb25seSAjaGlzdG9yeVZhbGlkYXRvcjogVmFsaWRhdG9yPEhpc3Rvcnk+O1xuICByZWFkb25seSAjcG9saWN5Q29uZmlnc1ZhbGlkYXRvcjogVmFsaWRhdG9yPFBvbGljeUNvbmZpZ3M+O1xuXG4gIHJldHJpZXZlKCk6IFJlc3VsdDxBY3Rpb25JbnB1dCwgRXJyb3I+IHtcbiAgICBjb25zdCBjdXJyZW50OiBSZXN1bHQ8SGlzdG9yeUVudHJ5LCBFcnJvcj4gPSB0aGlzLiNpby5nZXRPYmplY3QoXG4gICAgICBcImN1cnJlbnRcIixcbiAgICAgIFNvbWUodGhpcy4jaGlzdG9yeUVudHJ5VmFsaWRhdG9yKVxuICAgICk7XG4gICAgY29uc3QgYmFzZTogUmVzdWx0PFxuICAgICAgT3B0aW9uPEhpc3RvcnlFbnRyeT4sXG4gICAgICBFcnJvclxuICAgID4gPSB0aGlzLiNpby5nZXRPcHRpb25hbE9iamVjdChcImJhc2VcIiwgU29tZSh0aGlzLiNoaXN0b3J5RW50cnlWYWxpZGF0b3IpKTtcbiAgICBjb25zdCBoaXN0b3J5OiBSZXN1bHQ8SGlzdG9yeSwgRXJyb3I+ID0gdGhpcy4jaW8uZ2V0T2JqZWN0KFxuICAgICAgXCJoaXN0b3J5XCIsXG4gICAgICBTb21lKHRoaXMuI2hpc3RvcnlWYWxpZGF0b3IpXG4gICAgKTtcbiAgICBjb25zdCBwb2xpY3lDb25maWdzOiBSZXN1bHQ8UG9saWN5Q29uZmlncywgRXJyb3I+ID0gdGhpcy4jaW8uZ2V0T2JqZWN0KFxuICAgICAgXCJwb2xpY2llc1wiLFxuICAgICAgU29tZSh0aGlzLiNwb2xpY3lDb25maWdzVmFsaWRhdG9yKVxuICAgICk7XG5cbiAgICByZXR1cm4gY3VycmVudC5hbmRUaGVuKChjOiBIaXN0b3J5RW50cnkpID0+XG4gICAgICBiYXNlLmFuZFRoZW4oKGI6IE9wdGlvbjxIaXN0b3J5RW50cnk+KSA9PlxuICAgICAgICBoaXN0b3J5LmFuZFRoZW4oKGg6IEhpc3RvcnkpID0+XG4gICAgICAgICAgcG9saWN5Q29uZmlncy5tYXAoXG4gICAgICAgICAgICAocDogUG9saWN5Q29uZmlncykgPT5cbiAgICAgICAgICAgICAgKHsgY3VycmVudDogYywgYmFzZTogYiwgaGlzdG9yeTogaCwgcG9saWNpZXM6IHAgfSBhcyBBY3Rpb25JbnB1dClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgaW86IEFjdGlvbklPLFxuICAgIGhpc3RvcnlFbnRyeVZhbGlkYXRvcjogVmFsaWRhdG9yPEhpc3RvcnlFbnRyeT4sXG4gICAgaGlzdG9yeVZhbGlkYXRvcjogVmFsaWRhdG9yPEhpc3Rvcnk+LFxuICAgIHBvbGljeUNvbmZpZ3NWYWxpZGF0b3I6IFZhbGlkYXRvcjxQb2xpY3lDb25maWdzPlxuICApIHtcbiAgICB0aGlzLiNpbyA9IGlvO1xuICAgIHRoaXMuI2hpc3RvcnlFbnRyeVZhbGlkYXRvciA9IGhpc3RvcnlFbnRyeVZhbGlkYXRvcjtcbiAgICB0aGlzLiNoaXN0b3J5VmFsaWRhdG9yID0gaGlzdG9yeVZhbGlkYXRvcjtcbiAgICB0aGlzLiNwb2xpY3lDb25maWdzVmFsaWRhdG9yID0gcG9saWN5Q29uZmlnc1ZhbGlkYXRvcjtcbiAgfVxufVxuXG5leHBvcnQgeyBJb0lucHV0UmV0cmlldmVyIH07XG4iXX0=