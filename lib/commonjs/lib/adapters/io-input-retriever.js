import { Some } from "../core/option";
class IoInputRetriever {
    #io;
    #historyEntryValidator;
    #historyValidator;
    #policyConfigsValidator;
    retrieve() {
        const current = this.#io.getObject("current", Some(this.#historyEntryValidator));
        const base = this.#io.getOptionalObject("base", Some(this.#historyEntryValidator));
        const history = this.#io
            .getOptionalObject("history", Some(this.#historyValidator))
            .map(async (x) => await x.unwrapOr([]));
        const policyConfigs = this.#io.getObject("policies", Some(this.#policyConfigsValidator));
        return current.andThen((c) => base.andThen((b) => history.andThen((h) => policyConfigs.map((p) => ({ current: c, base: b, history: h, policies: p })))));
    }
    constructor(io, historyEntryValidator, historyValidator, policyConfigsValidator) {
        this.#io = io;
        this.#historyEntryValidator = historyEntryValidator;
        this.#historyValidator = historyValidator;
        this.#policyConfigsValidator = policyConfigsValidator;
    }
}
export { IoInputRetriever };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW8taW5wdXQtcmV0cmlldmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9hZGFwdGVycy9pby1pbnB1dC1yZXRyaWV2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsT0FBTyxFQUFVLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlDLE1BQU0sZ0JBQWdCO0lBQ1gsR0FBRyxDQUFXO0lBQ2Qsc0JBQXNCLENBQTBCO0lBQ2hELGlCQUFpQixDQUFxQjtJQUN0Qyx1QkFBdUIsQ0FBMkI7SUFFM0QsUUFBUTtRQUNOLE1BQU0sT0FBTyxHQUFnQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FDN0QsU0FBUyxFQUNULElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FDbEMsQ0FBQztRQUNGLE1BQU0sSUFBSSxHQUdOLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1FBRTFFLE1BQU0sT0FBTyxHQUEyQixJQUFJLENBQUMsR0FBRzthQUM3QyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2FBQzFELEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxQyxNQUFNLGFBQWEsR0FBaUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQ3BFLFVBQVUsRUFDVixJQUFJLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQ25DLENBQUM7UUFFRixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFlLEVBQUUsRUFBRSxDQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBdUIsRUFBRSxFQUFFLENBQ3ZDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFVLEVBQUUsRUFBRSxDQUM3QixhQUFhLENBQUMsR0FBRyxDQUNmLENBQUMsQ0FBZ0IsRUFBRSxFQUFFLENBQ25CLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFrQixDQUFBLENBQ3BFLENBQ0YsQ0FDRixDQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsWUFDRSxFQUFZLEVBQ1oscUJBQThDLEVBQzlDLGdCQUFvQyxFQUNwQyxzQkFBZ0Q7UUFFaEQsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsc0JBQXNCLEdBQUcscUJBQXFCLENBQUM7UUFDcEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDO1FBQzFDLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxzQkFBc0IsQ0FBQztJQUN4RCxDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbklucHV0LCBJbnB1dFJldHJpZXZlciB9IGZyb20gXCIuLi9pbnRlcmZhY2UvaW5wdXQtcmV0cmlldmVyXCI7XG5pbXBvcnQgeyBBY3Rpb25JTyB9IGZyb20gXCIuLi9pbnRlcmZhY2UvaW9cIjtcbmltcG9ydCB7IFJlc3VsdCB9IGZyb20gXCIuLi9jb3JlL3Jlc3VsdFwiO1xuaW1wb3J0IHsgVmFsaWRhdG9yIH0gZnJvbSBcIi4uL2ludGVyZmFjZS92YWxpZGF0b3JcIjtcbmltcG9ydCB7IEhpc3RvcnlFbnRyeSwgSGlzdG9yeSB9IGZyb20gXCIuLi9oaXN0b3J5XCI7XG5pbXBvcnQgeyBQb2xpY3lDb25maWdzIH0gZnJvbSBcIi4uL3BvbGljeS1jb25maWdcIjtcbmltcG9ydCB7IE9wdGlvbiwgU29tZSB9IGZyb20gXCIuLi9jb3JlL29wdGlvblwiO1xuXG5jbGFzcyBJb0lucHV0UmV0cmlldmVyIGltcGxlbWVudHMgSW5wdXRSZXRyaWV2ZXIge1xuICByZWFkb25seSAjaW86IEFjdGlvbklPO1xuICByZWFkb25seSAjaGlzdG9yeUVudHJ5VmFsaWRhdG9yOiBWYWxpZGF0b3I8SGlzdG9yeUVudHJ5PjtcbiAgcmVhZG9ubHkgI2hpc3RvcnlWYWxpZGF0b3I6IFZhbGlkYXRvcjxIaXN0b3J5PjtcbiAgcmVhZG9ubHkgI3BvbGljeUNvbmZpZ3NWYWxpZGF0b3I6IFZhbGlkYXRvcjxQb2xpY3lDb25maWdzPjtcblxuICByZXRyaWV2ZSgpOiBSZXN1bHQ8QWN0aW9uSW5wdXQsIEVycm9yPiB7XG4gICAgY29uc3QgY3VycmVudDogUmVzdWx0PEhpc3RvcnlFbnRyeSwgRXJyb3I+ID0gdGhpcy4jaW8uZ2V0T2JqZWN0KFxuICAgICAgXCJjdXJyZW50XCIsXG4gICAgICBTb21lKHRoaXMuI2hpc3RvcnlFbnRyeVZhbGlkYXRvcilcbiAgICApO1xuICAgIGNvbnN0IGJhc2U6IFJlc3VsdDxcbiAgICAgIE9wdGlvbjxIaXN0b3J5RW50cnk+LFxuICAgICAgRXJyb3JcbiAgICA+ID0gdGhpcy4jaW8uZ2V0T3B0aW9uYWxPYmplY3QoXCJiYXNlXCIsIFNvbWUodGhpcy4jaGlzdG9yeUVudHJ5VmFsaWRhdG9yKSk7XG5cbiAgICBjb25zdCBoaXN0b3J5OiBSZXN1bHQ8SGlzdG9yeSwgRXJyb3I+ID0gdGhpcy4jaW9cbiAgICAgIC5nZXRPcHRpb25hbE9iamVjdChcImhpc3RvcnlcIiwgU29tZSh0aGlzLiNoaXN0b3J5VmFsaWRhdG9yKSlcbiAgICAgIC5tYXAoYXN5bmMgKHgpID0+IGF3YWl0IHgudW53cmFwT3IoW10pKTtcbiAgICBjb25zdCBwb2xpY3lDb25maWdzOiBSZXN1bHQ8UG9saWN5Q29uZmlncywgRXJyb3I+ID0gdGhpcy4jaW8uZ2V0T2JqZWN0KFxuICAgICAgXCJwb2xpY2llc1wiLFxuICAgICAgU29tZSh0aGlzLiNwb2xpY3lDb25maWdzVmFsaWRhdG9yKVxuICAgICk7XG5cbiAgICByZXR1cm4gY3VycmVudC5hbmRUaGVuKChjOiBIaXN0b3J5RW50cnkpID0+XG4gICAgICBiYXNlLmFuZFRoZW4oKGI6IE9wdGlvbjxIaXN0b3J5RW50cnk+KSA9PlxuICAgICAgICBoaXN0b3J5LmFuZFRoZW4oKGg6IEhpc3RvcnkpID0+XG4gICAgICAgICAgcG9saWN5Q29uZmlncy5tYXAoXG4gICAgICAgICAgICAocDogUG9saWN5Q29uZmlncykgPT5cbiAgICAgICAgICAgICAgKHsgY3VycmVudDogYywgYmFzZTogYiwgaGlzdG9yeTogaCwgcG9saWNpZXM6IHAgfSBhcyBBY3Rpb25JbnB1dClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgaW86IEFjdGlvbklPLFxuICAgIGhpc3RvcnlFbnRyeVZhbGlkYXRvcjogVmFsaWRhdG9yPEhpc3RvcnlFbnRyeT4sXG4gICAgaGlzdG9yeVZhbGlkYXRvcjogVmFsaWRhdG9yPEhpc3Rvcnk+LFxuICAgIHBvbGljeUNvbmZpZ3NWYWxpZGF0b3I6IFZhbGlkYXRvcjxQb2xpY3lDb25maWdzPlxuICApIHtcbiAgICB0aGlzLiNpbyA9IGlvO1xuICAgIHRoaXMuI2hpc3RvcnlFbnRyeVZhbGlkYXRvciA9IGhpc3RvcnlFbnRyeVZhbGlkYXRvcjtcbiAgICB0aGlzLiNoaXN0b3J5VmFsaWRhdG9yID0gaGlzdG9yeVZhbGlkYXRvcjtcbiAgICB0aGlzLiNwb2xpY3lDb25maWdzVmFsaWRhdG9yID0gcG9saWN5Q29uZmlnc1ZhbGlkYXRvcjtcbiAgfVxufVxuXG5leHBvcnQgeyBJb0lucHV0UmV0cmlldmVyIH07XG4iXX0=