import { toOption } from "./util";
class BasicElementMapper {
    toIntermediateMetadata({ url, name, data }, base) {
        const d = (() => {
            switch (data.type) {
                case "documentation":
                    return {
                        ...data,
                        resultDetails: {
                            fail: [],
                            pass: [],
                            warn: [],
                        },
                    };
                case "code-quality":
                    return {
                        ...data,
                        resultDetails: {
                            fail: [],
                            pass: [],
                            warn: [],
                        },
                    };
                case "test-coverage":
                    return {
                        ...data,
                        delta: base
                            .andThen((x) => toOption(x.find((b) => b.name === name && b.data.type === "test-coverage")?.data))
                            .map((x) => ({
                            branch: data.branch - x.branch,
                            line: data.line - x.line,
                            function: data.function - x.function,
                            statement: data.statement - x.statement,
                        })),
                        resultDetails: {
                            fail: [],
                            pass: [],
                            warn: [],
                        },
                    };
                case "test-result":
                    return {
                        ...data,
                        resultDetails: {
                            fail: [],
                            pass: [],
                            warn: [],
                        },
                    };
                default:
                    throw new Error("unreachable");
            }
        })();
        return {
            url,
            name,
            data: d,
        };
    }
    inputToIntermediate({ sha, url, items, action }, base) {
        return {
            url,
            sha,
            action,
            items: items.map((x) => this.toIntermediateMetadata(x, base.map((b) => b.items))),
        };
    }
    toOutputMetadata({ url, name, data }) {
        return {
            url,
            name,
            data: {
                ...data,
                result: data.resultDetails.fail.length > 0
                    ? "fail"
                    : data.resultDetails.warn.length > 0
                        ? "warn"
                        : "pass",
            },
        };
    }
    intermediateToOutput({ sha, url, items, action, }) {
        return {
            url,
            sha,
            action,
            items: items.map((x) => this.toOutputMetadata(x)),
        };
    }
}
export { BasicElementMapper };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWMtZWxlbWVudC1tYXBwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2Jhc2ljLWVsZW1lbnQtbWFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFbEMsTUFBTSxrQkFBa0I7SUFDdEIsc0JBQXNCLENBQ3BCLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQVMsRUFDMUIsSUFBcUI7UUFFckIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUF5QixFQUFFO1lBQ3BDLFFBQVEsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDakIsS0FBSyxlQUFlO29CQUNsQixPQUFPO3dCQUNMLEdBQUcsSUFBSTt3QkFDUCxhQUFhLEVBQUU7NEJBQ2IsSUFBSSxFQUFFLEVBQUU7NEJBQ1IsSUFBSSxFQUFFLEVBQUU7NEJBQ1IsSUFBSSxFQUFFLEVBQUU7eUJBQ1Q7cUJBQ0YsQ0FBQztnQkFDSixLQUFLLGNBQWM7b0JBQ2pCLE9BQU87d0JBQ0wsR0FBRyxJQUFJO3dCQUNQLGFBQWEsRUFBRTs0QkFDYixJQUFJLEVBQUUsRUFBRTs0QkFDUixJQUFJLEVBQUUsRUFBRTs0QkFDUixJQUFJLEVBQUUsRUFBRTt5QkFDVDtxQkFDRixDQUFDO2dCQUNKLEtBQUssZUFBZTtvQkFDbEIsT0FBTzt3QkFDTCxHQUFHLElBQUk7d0JBQ1AsS0FBSyxFQUFFLElBQUk7NkJBQ1IsT0FBTyxDQUNOLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDSixRQUFRLENBQ04sQ0FBQyxDQUFDLElBQUksQ0FDSixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssZUFBZSxDQUMxRCxFQUFFLElBQUksQ0FDd0IsQ0FDcEM7NkJBQ0EsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDOzRCQUNYLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNOzRCQUM5QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSTs0QkFDeEIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVE7NEJBQ3BDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTO3lCQUN4QyxDQUFDLENBQUM7d0JBQ0wsYUFBYSxFQUFFOzRCQUNiLElBQUksRUFBRSxFQUFFOzRCQUNSLElBQUksRUFBRSxFQUFFOzRCQUNSLElBQUksRUFBRSxFQUFFO3lCQUNUO3FCQUNGLENBQUM7Z0JBQ0osS0FBSyxhQUFhO29CQUNoQixPQUFPO3dCQUNMLEdBQUcsSUFBSTt3QkFDUCxhQUFhLEVBQUU7NEJBQ2IsSUFBSSxFQUFFLEVBQUU7NEJBQ1IsSUFBSSxFQUFFLEVBQUU7NEJBQ1IsSUFBSSxFQUFFLEVBQUU7eUJBQ1Q7cUJBQ0YsQ0FBQztnQkFDSjtvQkFDRSxNQUFNLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ2xDO1FBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUVMLE9BQU87WUFDTCxHQUFHO1lBQ0gsSUFBSTtZQUNKLElBQUksRUFBRSxDQUFDO1NBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxtQkFBbUIsQ0FDakIsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQWdCLEVBQ3pDLElBQTBCO1FBRTFCLE9BQU87WUFDTCxHQUFHO1lBQ0gsR0FBRztZQUNILE1BQU07WUFDTixLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQ3JCLElBQUksQ0FBQyxzQkFBc0IsQ0FDekIsQ0FBQyxFQUNELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FDekIsQ0FDRjtTQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBdUI7UUFDdkQsT0FBTztZQUNMLEdBQUc7WUFDSCxJQUFJO1lBQ0osSUFBSSxFQUFFO2dCQUNKLEdBQUcsSUFBSTtnQkFDUCxNQUFNLEVBQ0osSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7b0JBQ2hDLENBQUMsQ0FBQyxNQUFNO29CQUNSLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQzt3QkFDcEMsQ0FBQyxDQUFDLE1BQU07d0JBQ1IsQ0FBQyxDQUFDLE1BQU07YUFDYjtTQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsb0JBQW9CLENBQUMsRUFDbkIsR0FBRyxFQUNILEdBQUcsRUFDSCxLQUFLLEVBQ0wsTUFBTSxHQUNZO1FBQ2xCLE9BQU87WUFDTCxHQUFHO1lBQ0gsR0FBRztZQUNILE1BQU07WUFDTixLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2xELENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRNYXBwZXIgfSBmcm9tIFwiLi9pbnRlcmZhY2UvbWFwcGVyXCI7XG5pbXBvcnQgeyBIaXN0b3J5RW50cnksIElucHV0LCBUZXN0Q292ZXJhZ2VNZXRhZGF0YSB9IGZyb20gXCIuL2hpc3RvcnlcIjtcbmltcG9ydCB7XG4gIEludGVybWVkaWF0ZUVsZW1lbnQsXG4gIEludGVybWVkaWF0ZUVudHJ5LFxuICBJbnRlcm1lZGlhdGVNZXRhZGF0YSxcbiAgT3V0cHV0RWxlbWVudCxcbiAgT3V0cHV0RW50cnksXG59IGZyb20gXCIuL291dHB1dFwiO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSBcIi4vY29yZS9vcHRpb25cIjtcbmltcG9ydCB7IHRvT3B0aW9uIH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5jbGFzcyBCYXNpY0VsZW1lbnRNYXBwZXIgaW1wbGVtZW50cyBFbGVtZW50TWFwcGVyIHtcbiAgdG9JbnRlcm1lZGlhdGVNZXRhZGF0YShcbiAgICB7IHVybCwgbmFtZSwgZGF0YSB9OiBJbnB1dCxcbiAgICBiYXNlOiBPcHRpb248SW5wdXRbXT5cbiAgKTogSW50ZXJtZWRpYXRlRWxlbWVudCB7XG4gICAgY29uc3QgZCA9ICgoKTogSW50ZXJtZWRpYXRlTWV0YWRhdGEgPT4ge1xuICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcImRvY3VtZW50YXRpb25cIjpcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgIHJlc3VsdERldGFpbHM6IHtcbiAgICAgICAgICAgICAgZmFpbDogW10sXG4gICAgICAgICAgICAgIHBhc3M6IFtdLFxuICAgICAgICAgICAgICB3YXJuOiBbXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBcImNvZGUtcXVhbGl0eVwiOlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgICAgcmVzdWx0RGV0YWlsczoge1xuICAgICAgICAgICAgICBmYWlsOiBbXSxcbiAgICAgICAgICAgICAgcGFzczogW10sXG4gICAgICAgICAgICAgIHdhcm46IFtdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9O1xuICAgICAgICBjYXNlIFwidGVzdC1jb3ZlcmFnZVwiOlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgICAgZGVsdGE6IGJhc2VcbiAgICAgICAgICAgICAgLmFuZFRoZW4oXG4gICAgICAgICAgICAgICAgKHgpID0+XG4gICAgICAgICAgICAgICAgICB0b09wdGlvbihcbiAgICAgICAgICAgICAgICAgICAgeC5maW5kKFxuICAgICAgICAgICAgICAgICAgICAgIChiKSA9PiBiLm5hbWUgPT09IG5hbWUgJiYgYi5kYXRhLnR5cGUgPT09IFwidGVzdC1jb3ZlcmFnZVwiXG4gICAgICAgICAgICAgICAgICAgICk/LmRhdGFcbiAgICAgICAgICAgICAgICAgICkgYXMgT3B0aW9uPFRlc3RDb3ZlcmFnZU1ldGFkYXRhPlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIC5tYXAoKHgpID0+ICh7XG4gICAgICAgICAgICAgICAgYnJhbmNoOiBkYXRhLmJyYW5jaCAtIHguYnJhbmNoLFxuICAgICAgICAgICAgICAgIGxpbmU6IGRhdGEubGluZSAtIHgubGluZSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbjogZGF0YS5mdW5jdGlvbiAtIHguZnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgc3RhdGVtZW50OiBkYXRhLnN0YXRlbWVudCAtIHguc3RhdGVtZW50LFxuICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICByZXN1bHREZXRhaWxzOiB7XG4gICAgICAgICAgICAgIGZhaWw6IFtdLFxuICAgICAgICAgICAgICBwYXNzOiBbXSxcbiAgICAgICAgICAgICAgd2FybjogW10sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgXCJ0ZXN0LXJlc3VsdFwiOlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgICAgcmVzdWx0RGV0YWlsczoge1xuICAgICAgICAgICAgICBmYWlsOiBbXSxcbiAgICAgICAgICAgICAgcGFzczogW10sXG4gICAgICAgICAgICAgIHdhcm46IFtdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVucmVhY2hhYmxlXCIpO1xuICAgICAgfVxuICAgIH0pKCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdXJsLFxuICAgICAgbmFtZSxcbiAgICAgIGRhdGE6IGQsXG4gICAgfTtcbiAgfVxuXG4gIGlucHV0VG9JbnRlcm1lZGlhdGUoXG4gICAgeyBzaGEsIHVybCwgaXRlbXMsIGFjdGlvbiB9OiBIaXN0b3J5RW50cnksXG4gICAgYmFzZTogT3B0aW9uPEhpc3RvcnlFbnRyeT5cbiAgKTogSW50ZXJtZWRpYXRlRW50cnkge1xuICAgIHJldHVybiB7XG4gICAgICB1cmwsXG4gICAgICBzaGEsXG4gICAgICBhY3Rpb24sXG4gICAgICBpdGVtczogaXRlbXMubWFwKCh4KSA9PlxuICAgICAgICB0aGlzLnRvSW50ZXJtZWRpYXRlTWV0YWRhdGEoXG4gICAgICAgICAgeCxcbiAgICAgICAgICBiYXNlLm1hcCgoYikgPT4gYi5pdGVtcylcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICB9O1xuICB9XG5cbiAgdG9PdXRwdXRNZXRhZGF0YSh7IHVybCwgbmFtZSwgZGF0YSB9OiBJbnRlcm1lZGlhdGVFbGVtZW50KTogT3V0cHV0RWxlbWVudCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVybCxcbiAgICAgIG5hbWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIHJlc3VsdDpcbiAgICAgICAgICBkYXRhLnJlc3VsdERldGFpbHMuZmFpbC5sZW5ndGggPiAwXG4gICAgICAgICAgICA/IFwiZmFpbFwiXG4gICAgICAgICAgICA6IGRhdGEucmVzdWx0RGV0YWlscy53YXJuLmxlbmd0aCA+IDBcbiAgICAgICAgICAgID8gXCJ3YXJuXCJcbiAgICAgICAgICAgIDogXCJwYXNzXCIsXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBpbnRlcm1lZGlhdGVUb091dHB1dCh7XG4gICAgc2hhLFxuICAgIHVybCxcbiAgICBpdGVtcyxcbiAgICBhY3Rpb24sXG4gIH06IEludGVybWVkaWF0ZUVudHJ5KTogT3V0cHV0RW50cnkge1xuICAgIHJldHVybiB7XG4gICAgICB1cmwsXG4gICAgICBzaGEsXG4gICAgICBhY3Rpb24sXG4gICAgICBpdGVtczogaXRlbXMubWFwKCh4KSA9PiB0aGlzLnRvT3V0cHV0TWV0YWRhdGEoeCkpLFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IHsgQmFzaWNFbGVtZW50TWFwcGVyIH07XG4iXX0=